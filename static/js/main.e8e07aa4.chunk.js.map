{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","constants/index.ts","components/FindMovie/FindMovie.tsx","helpers/api.ts","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","URL_API","FindMovie","addMovie","movieAlreadyExist","useState","searchInput","setSearchInput","movieFound","setMovieFound","errorMessage","setErrorMessage","useEffect","findMovieOnServer","debounce","trim","movieTitle","fetch","then","response","json","Title","Plot","Poster","imdbID","onSubmit","e","preventDefault","htmlFor","type","id","placeholder","classNames","value","onChange","inputValue","currentTarget","onClick","App","setMovies","setMovieAlreadyExist","data","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e8e07aa4.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map((movie) => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","const API_KEY = 'ae56f9f7';\n\nexport const URL_API = `https://www.omdbapi.com/?i=tt3896198&apikey=${API_KEY}`;\n","import React, { useState, useEffect } from 'react';\n\nimport classNames from 'classnames';\nimport { debounce } from 'debounce';\n\nimport './FindMovie.scss';\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../helpers/api';\n\ntype Props = {\n  addMovie: (movie: Movie) => void;\n  movieAlreadyExist: boolean;\n};\n\nexport const FindMovie: React.FC<Props> = ({ addMovie, movieAlreadyExist }) => {\n  const [searchInput, setSearchInput] = useState('');\n  const [movieFound, setMovieFound] = useState<Movie | null>(null);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    if (movieAlreadyExist) {\n      setErrorMessage('Movie already added to the list');\n    }\n  }, [movieAlreadyExist]);\n\n  const findMovieOnServer = debounce(() => {\n    if (searchInput.trim() === '') {\n      setErrorMessage('Please enter the movie title');\n      setMovieFound(null);\n\n      return;\n    }\n\n    const moviePromise = getMovie(searchInput.trim());\n\n    moviePromise.then(movie => {\n      const {\n        Title,\n        Plot,\n        Poster,\n        imdbID,\n      } = movie;\n\n      if (!movie.Title) {\n        setErrorMessage('Can\\'t find a movie with such a title');\n        setMovieFound(null);\n\n        return;\n      }\n\n      setMovieFound({\n        title: Title,\n        description: Plot,\n        imgUrl: Poster,\n        imdbUrl: `https://www.imdb.com/title/${imdbID}/`,\n        imdbId: imdbID,\n      });\n    });\n  }, 300);\n\n  const handleAddMovie = () => {\n    if (movieFound) {\n      addMovie(movieFound);\n      setSearchInput('');\n      setMovieFound(null);\n\n      return;\n    }\n\n    setErrorMessage('Find a movie before adding');\n  };\n\n  const handleFormSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n  };\n\n  const handleSearchInput = (e: React.FormEvent<HTMLInputElement>) => {\n    const inputValue = e.currentTarget.value;\n\n    setErrorMessage('');\n    setSearchInput(inputValue);\n  };\n\n  return (\n    <>\n      <form\n        onSubmit={handleFormSubmit}\n        className=\"find-movie\"\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={\n                classNames('input', { 'is-danger': errorMessage })\n              }\n              value={searchInput}\n              onChange={handleSearchInput}\n            />\n          </div>\n          {errorMessage && (\n            <p className=\"help is-danger\">\n              {errorMessage}\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={findMovieOnServer}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={handleAddMovie}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        {movieFound && (\n          <>\n            <h2 className=\"title\">Preview</h2>\n            <MovieCard {...movieFound} />\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n","import { URL_API } from '../constants';\n\nexport const getMovie = (movieTitle: string): Promise<MovieFormServer> => {\n  return fetch(`${URL_API}&t=${movieTitle}`)\n    .then(response => response.json());\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [movieAlreadyExist, setMovieAlreadyExist] = useState(false);\n\n  useEffect(() => {\n    setMovies(data);\n  }, []);\n\n  const addMovie = (movie: Movie) => {\n    const isAlreadyAdded = movies.some(({ imdbId }) => {\n      return imdbId === movie.imdbId;\n    });\n\n    if (isAlreadyAdded) {\n      setMovieAlreadyExist(true);\n\n      return;\n    }\n\n    setMovieAlreadyExist(false);\n    setMovies([...movies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          addMovie={addMovie}\n          movieAlreadyExist={movieAlreadyExist}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}